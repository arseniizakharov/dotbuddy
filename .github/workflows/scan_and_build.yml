name: Vuln Check & Build

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
    tags: 
      - 'v*'
  schedule:
    - cron: '0 8 1 * *'

permissions:
  contents: write
  security-events: write

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
      
      - name: Get dependencies
        run: go mod download
      
      - name: Build binary
        run: |
          echo "[INFO] Building linux binary..."
          GOOS=linux GOARCH=amd64 go build -v -o dotbuddy-linux-amd64
          echo "[INFO] Building macOS binary..."
          GOOS=darwin GOARCH=arm64 go build -v -o dotbuddy-darwin-arm64

      - name: Generate Release Notes
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          echo "# DotBuddy Release" > release-notes.md
          echo "## Changes in this version" >> release-notes.md
          echo "$(git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:'- %s' --no-merges)" >> release-notes.md
      
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dotbuddy-linux-amd64
            dotbuddy-darwin-amd64
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: dotbuddy
          path: dotbuddy
          retention-days: 5
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:go"

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt=sarif -out=gosec-results.sarif ./...'
      
      - name: Generate Security Report
        if: github.event_name == 'pull_request'
        id: security-report
        run: |
          echo "# Security Scan Results" > security-report.md
          echo "## CodeQL Analysis" >> security-report.md
          echo "CodeQL results are available in the Security tab of this repository." >> security-report.md
          echo "" >> security-report.md
          
          echo "## Gosec Analysis" >> security-report.md
          if [ -f gosec-results.sarif ]; then
            echo "Gosec findings:" >> security-report.md
            jq -r '.runs[].results[] | "- **" + .level + "**: " + .message.text' gosec-results.sarif >> security-report.md
          else
            echo "No Gosec findings." >> security-report.md
          fi
          
          echo "" >> security-report.md
          echo "### Security Guidelines" >> security-report.md
          echo "Please review any findings above. Common issues to check:" >> security-report.md
          echo "- SQL injection vulnerabilities" >> security-report.md
          echo "- Hard-coded credentials" >> security-report.md
          echo "- Unsafe file operations" >> security-report.md
          echo "- Insecure cryptographic operations" >> security-report.md

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            const commentBody = `## Security Scan Summary\n${report}`;
            
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Security Scan Summary')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
